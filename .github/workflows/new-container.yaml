name: 'Generate New Container'

on:
   workflow_dispatch: 
     inputs:
       docker_uri:
         description: 'Docker identifier to generate recipe for'
         required: true
         default: "autamus/clingo:5.5.1"
       url:
         description: 'URL associated with container'
         required: true
       description:
         description: 'description of the container'
         required: true

jobs:
  new-container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Create conda environment
        run: conda create --quiet -c conda-forge --name shpc spython

      - name: Install shpc and Guts
        run: |
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate shpc
          pip install git+https://github.com/singularityhub/singularity-hpc@main
          pip install git+https://github.com/singularityhub/guts@main

      - name: Generate module
        env:
          url: ${{ inputs.url || 'https://singularityhub.github.io/shpc-registry' }}
          image: ${{ inputs.docker_uri || 'autamus/clingo:5.5.1' }}
          maintainer: ${{ github.actor }}
          description: ${{ inputs.description || '"Container generated for shpc-registry"' }}
        run: |
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate shpc         
          printf "python .github/scripts/add_container.py --maintainer "${maintainer}" --description "${description}" --url "${url}" docker://${image}\n"
          python .github/scripts/add_container.py --maintainer "${maintainer}" --description "${description}" --url "${url}" docker://${image}

      - name: Checkout Update branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_AGAINST: "main"
        run: |
          printf "GitHub Actor: ${GITHUB_ACTOR}\n"
          export BRANCH_FROM="container/new-$(date '+%Y-%m-%d')"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          BRANCH_EXISTS=$(git ls-remote --heads origin ${BRANCH_FROM})
          if [[ -z ${BRANCH_EXISTS} ]]; then
              printf "Branch does not exist in remote.\n"
          else
              printf "Branch already exists in remote.\n"
              exit 1
          fi
          git branch
          git checkout -b "${BRANCH_FROM}" || git checkout "${BRANCH_FROM}"
          git branch
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git add ./*
          git status
          if git diff-index --quiet HEAD --; then
             export OPEN_PULL_REQUEST=0
             printf "No changes\n"
          else
             export OPEN_PULL_REQUEST=1
             printf "Changes\n"
             git commit -a -m "Automated deployment with new container $(date '+%Y-%m-%d')"
             git push origin "${BRANCH_FROM}"
          fi
          echo "OPEN_PULL_REQUEST=${OPEN_PULL_REQUEST}" >> $GITHUB_ENV
          echo "PULL_REQUEST_FROM_BRANCH=${BRANCH_FROM}" >> $GITHUB_ENV
          echo "PULL_REQUEST_TITLE=[bot] ${BRANCH_FROM}" >> $GITHUB_ENV
          echo "PULL_REQUEST_BODY=Add new container pull request." >> $GITHUB_ENV
      - name: Open Pull Request
        uses: vsoch/pull-request-action@1.0.16
        if: ${{ env.OPEN_PULL_REQUEST == '1' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_BRANCH: "main"
